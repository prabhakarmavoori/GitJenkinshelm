pipeline {
    agent any

    environment {
        GITHUB_REGISTRY = 'ghcr.io'            // GitHub Container Registry URL
        GITHUB_USER = 'prabhakarmavoori'   // Your GitHub username
        REPO_NAME = 'gitjenkinshelm'     // Your GitHub repository name
        IMAGE_NAME = "${GITHUB_REGISTRY}/${GITHUB_USER}/${REPO_NAME}"  // Full image name
        //GITHUB_TOKEN = credentials('git-token') // GitHub Personal Access Token stored in Jenkins
		HELM_CHART_NAME = 'praGitJenkinshelm'
    }

    stages {
        
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                //git branch: 'main', url: "https://github.com/${GITHUB_USER}/${REPO_NAME}.git"
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-token', url: "https://github.com/${GITHUB_USER}/${REPO_NAME}.git"]])
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    def image= docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                    //powershell 'docker build -t myworld:latest .'
                }
            }
        }
        
        stage('Push Docker Image to GHCR') {
            steps {
                script {
                    // Log in to GitHub Container Registry using the token
                    docker.withRegistry("https://${GITHUB_REGISTRY}", 'git-token') 
                    {
                        // Push the built image to GHCR
                        docker.image("${IMAGE_NAME}:${env.BUILD_ID}").push()
                    }
                }
            }
        }
		
		
		 stage ('Helm Deploy') {
          steps {
            script {
                 helm upgrade --install my-release ${HELM_CHART_NAME} --set myimage.reponame=${IMAGE_NAME} --set myimage.repotag=${env.BUILD_ID}
               }
            }
        }

    }

    post {
        always {
            // Clean workspace after build
            cleanWs()
        }
    }
}